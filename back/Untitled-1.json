{
  "clientOrderId": "testOrder", // 用户自定义的订单号
  "cumQty": "0",
  "cumQuote": "0", // 成交金额
  "executedQty": "0", // 成交量
  "orderId": 22542179, // 系统订单号
  "avgPrice": "0.00000", // 平均成交价
  "origQty": "10", // 原始委托数量
  "price": "0", // 委托价格
  "reduceOnly": false, // 仅减仓
  "side": "SELL", // 买卖方向
  "positionSide": "SHORT", // 持仓方向
  "status": "NEW", // 订单状态
  "stopPrice": "0", // 触发价，对`TRAILING_STOP_MARKET`无效
  "closePosition": false, // 是否条件全平仓
  "symbol": "BTCUSDT", // 交易对
  "timeInForce": "GTC", // 有效方法
  "type": "TRAILING_STOP_MARKET", // 订单类型
  "origType": "TRAILING_STOP_MARKET", // 触发前订单类型
  "activatePrice": "9020", // 跟踪止损激活价格, 仅`TRAILING_STOP_MARKET` 订单返回此字段-------
  "priceRate": "0.3", // 跟踪止损回调比例, 仅`TRAILING_STOP_MARKET` 订单返回此字段---------
  "updateTime": 1566818724722, // 更新时间
  "workingType": "CONTRACT_PRICE", // 条件价格触发类型-------
  "priceProtect": false // 是否开启条件单触发保护
}

//---------------------------------
log('开始触发。。。。。');
      log('long:   ' + temp[temp.length - 1].m_long);
      log('short:   ' + temp[temp.length - 1].m_short);
      if (temp[temp.length - 1].m_long == true) {
        log('LONG信号出现。。。。。');
        //1> 买入
        //1> 查询当前币种 是否有SHORT方向 未平仓 仓位
        //1> 如果有 BUY SHORT 平仓 如果没有 BUY LONG 开仓
        const targetCheck = await positionRisk({
          keys: { api, sec },
          symbol: g_symbol,
          timestamp: Date.now() - 1000,
        });
        try {
          const checkLong = targetCheck.filter((d) => d.positionSide == 'LONG');
          log('加仓LONG.....: ');
          if (parseFloat(checkLong[0].positionAmt) > 0 && parseFloat(checkLong[0].unRealizedProfit) < 0) {
            const bresp = await fbuy({
              keys: { api, sec },
              symbol: g_symbol,
              side: 'BUY',
              positionSide: 'LONG',
              qty: 0.1,
              type: 'MARKET',
              timestamp: Date.now() - 1000,
            });

            log(bresp);
          } else if (parseFloat(checkLong[0].positionAmt) > 0 && parseFloat(checkLong[0].unRealizedProfit) > 0) {
            log('平仓LONG.....: ');
            const bresp = await fbuy({
              keys: { api, sec },
              symbol: g_symbol,
              side: 'SELL',
              positionSide: 'LONG',
              qty: parseFloat(checkLong[0].positionAmt),
              type: 'MARKET',
              timestamp: Date.now() - 1000,
            });

            log(bresp);
            log('开仓SHORT.....: ');
            const bresp2 = await fbuy({
              keys: { api, sec },
              symbol: g_symbol,
              qty: 0.1,
              side: 'SELL',
              positionSide: 'SHORT',
              type: 'MARKET',
            });

            log(bresp2);
          } else if (parseFloat(checkLong[0].positionAmt) == 0) {
            log('开仓LONG.....: ');
            const bresp = await fbuy({
              keys: { api, sec },
              symbol: g_symbol,
              qty: 0.1,
              side: 'BUY',
              positionSide: 'LONG',
              type: 'MARKET',
            });

            log(bresp);
          }

          // log(bresp);
        } catch (error) {
          log(error);
        }
        // log('开始买入.....: ' + temp[temp.length - 1].m_long);
      } else if (temp[temp.length - 1].m_short == true) {
        log('SHORT信号出现。。。。。');
        //1> 卖出
        //1> 查询当前币种 是否有SHORT方向 未平仓 仓位
        //1> 如果有 BUY SHORT 平仓 如果没有 SELL SHORT 开仓
        const targetCheck2 = await positionRisk({
          keys: { api, sec },
          symbol: g_symbol,
          timestamp: Date.now() - 1000,
        });
        try {
          const checkShort = targetCheck2.filter((d) => d.positionSide == 'SHORT');
          if (parseFloat(checkShort[0].positionAmt) < 0 && parseFloat(checkShort[0].unRealizedProfit) < 0) {
            log('加仓SHORT.....: ');
            const bresp = await fbuy({
              keys: { api, sec },
              symbol: g_symbol,
              side: 'SELL',
              positionSide: 'SHORT',
              qty: 0.1,
              type: 'MARKET',
              timestamp: Date.now() - 1000,
            });

            log(bresp);
          } else if (parseFloat(checkShort[0].positionAmt) < 0 && parseFloat(checkShort[0].unRealizedProfit) > 0) {
            log('平仓SHORT.....: ');
            const bresp = await fbuy({
              keys: { api, sec },
              symbol: g_symbol,
              side: 'BUY',
              positionSide: 'SHORT',
              qty: parseFloat(checkShort[0].positionAmt),
              type: 'MARKET',
              timestamp: Date.now() - 1000,
            });
            log(bresp);
            log('开仓LONG.....: ');
            const brespAga = await fbuy({
              keys: { api, sec },
              symbol: g_symbol,
              qty: 0.1,
              side: 'BUY',
              positionSide: 'LONG',
              type: 'MARKET',
            });

            log(brespAga);
          } else if (parseFloat(checkShort[0].positionAmt) == 0) {
            log('开仓SHORT.....: ');
            const bresp = await fbuy({
              keys: { api, sec },
              symbol: g_symbol,
              qty: 0.1,
              side: 'SELL',
              positionSide: 'SHORT',
              type: 'MARKET',
            });

            log(bresp);
          }

          // log(bresp);
        } catch (error) {
          log(error);
        }
        // log('开始卖出.....: ' + temp[temp.length - 1].m_short);
      }

      if (exec_policy == 'MACD' && netTime - rawData[rawData.length - 1].time == 30) {
      


      }